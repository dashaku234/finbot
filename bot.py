
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from collections import defaultdict

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is not set!")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

user_data = defaultdict(lambda: {"balance": 0, "income": 0, "expense": 0})
allowed_users = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username not in allowed_users:
        button = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 349‚ÇΩ", url="https://pay.cloudtips.ru/p/e7e1cfae")]]
        reply_markup = InlineKeyboardMarkup(button)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–ë–æ—Ç üíº\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Å—Ç–∏ –ª–∏—á–Ω—ã–π —É—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ 349‚ÇΩ.",
            reply_markup=reply_markup
        )
        return
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–§–∏–Ω–ë–æ—Ç –≥–æ—Ç–æ–≤. –í–≤–µ–¥–∏ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥:\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ—Ç—Ä–∞—Ç–∏–ª 500 –Ω–∞ –µ–¥—É"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username not in allowed_users:
        return

    text = update.message.text.lower()
    uid = user.username
    if any(word in text for word in ["–ø–æ—Ç—Ä–∞—Ç–∏–ª", "–∑–∞–ø–ª–∞—Ç–∏–ª", "—Ä–∞—Å—Ö–æ–¥"]):
        amount = [int(s) for s in text.split() if s.isdigit()]
        if amount:
            user_data[uid]["expense"] += amount[0]
            user_data[uid]["balance"] -= amount[0]
            await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–ª —Ä–∞—Å—Ö–æ–¥: -{amount[0]}‚ÇΩ")
    elif any(word in text for word in ["–ø–æ–ª—É—á–∏–ª", "–¥–æ—Ö–æ–¥", "–∑–∞—Ä–∞–±–æ—Ç–∞–ª"]):
        amount = [int(s) for s in text.split() if s.isdigit()]
        if amount:
            user_data[uid]["income"] += amount[0]
            user_data[uid]["balance"] += amount[0]
            await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–ª –¥–æ—Ö–æ–¥: +{amount[0]}‚ÇΩ")
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ—Ç—Ä–∞—Ç–∏–ª 500 –Ω–∞ –µ–¥—É")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username not in allowed_users:
        return
    uid = user.username
    stats = user_data[uid]
    msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–î–æ—Ö–æ–¥: {stats['income']}‚ÇΩ\n–†–∞—Å—Ö–æ–¥: {stats['expense']}‚ÇΩ\n–ë–∞–ª–∞–Ω—Å: {stats['balance']}‚ÇΩ"
    await update.message.reply_text(msg)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username not in allowed_users:
        return
    user_data[user.username] = {"balance": 0, "income": 0, "expense": 0}
    await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")

async def paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ï—Å–ª–∏ —Ç—ã –æ–ø–ª–∞—Ç–∏–ª ‚Äî –∂–¥–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –Ø –≤–∫–ª—é—á—É —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –≤—Ä—É—á–Ω—É—é.")

async def activate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != "your_admin_username":
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    if context.args:
        username = context.args[0].lstrip("@")
        allowed_users.add(username)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ username –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–Ω–∞—á–∞—Ç—å", start))
    app.add_handler(CommandHandler("–æ–ø–ª–∞—Ç–∏–ª", paid))
    app.add_handler(CommandHandler("–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", activate))
    app.add_handler(CommandHandler("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stats))
    app.add_handler(CommandHandler("—Å–±—Ä–æ—Å", reset))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()

if __name__ == '__main__':
    main()
